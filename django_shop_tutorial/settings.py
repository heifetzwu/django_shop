"""
Django settings for django_shop_tutorial project.

Generated by 'django-admin startproject' using Django 1.11.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os, configparser


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
inifile = os.path.join(BASE_DIR, 'settings.ini')
config = configparser.ConfigParser()
config.read(inifile)
DB_Profile = {
    'user': config['mysql']['user'],
    'password': config['mysql']['password'],
    'host': config['mysql']['host'],
    'port': config['mysql']['port']
}
AWS_Profile = {
    'id': config['aws']['id'],
    'key': config['aws']['key'],
    'AWS_STORAGE_BUCKET_NAME' : config['aws']['bucket_name']
}
USE_S3 = config['main']['USE_S3']


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '23szcx4&aha^m_l^lwuf!vg%-prmg$j_by_c7le%k#6b(+u3k3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bootstrap3',
    'shop',
    'cart',
    'orders',
    'paypal.standard.ipn',
    'payment',
    'storages'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'django_shop_tutorial.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'cart.context_processors.cart',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_shop_tutorial.wsgi.application'

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# Google帳號/應用程式密碼  django_shop 
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_HOST_USER = 'xxx@mail.com'
# EMAIL_HOST_PASSWORD = 'xxxxyyyyxxxxyyyy'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True



# django-paypal settings
# PAYPAL_RECEIVER_EMAIL = 'dikeooel3ski-facilitator@gmail.com'
PAYPAL_RECEIVER_EMAIL = 'sb-mzmxe29757227@business.example.com'
# buyer = sb-47xgek29757229@personal.example.com
PAYPAL_TEST = True


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

# docker run --name mysql8 -p 3307:3306 -e MYSQL_ROOT_PASSWORD=password -d mysql:8.0.17
"""
INSERT INTO shop_category (name, slug) VALUES ('3C', '3c');
INSERT INTO shop_category (name, slug) VALUES ('book', 'book');
INSERT INTO shop_category (name, slug) VALUES ('daily necessity', 'daily-necessity');
INSERT INTO shop_category (name, slug) VALUES ('food', 'food');
"""
# sudo apt install pkg-config
# pip install mysqlclient

DATABASES_sqllite3 = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

DATABASES = {
    'default': {
        # use mysql as database
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'shop',
        'USER': DB_Profile['user'],
        'PASSWORD': DB_Profile['password'],
        'HOST': DB_Profile['host'],
        'PORT': DB_Profile['port'],
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4',
            'use_unicode': True,           
            'init_command': "SET foreign_key_checks = 0",
            'init_command': "SET default_storage_engine = InnoDB"
        }         
    }
}
ECPAY = {
    'MerchantID': '3002607',
    'HashKey': 'pwFHCqoQZGmho4w6',
    'HashIV': 'EkRm7iFT261dpevs',
}

           
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    # 'filters': {
    #     'special': {
    #         '()': 'project.logging.SpecialFilter',
    #         'foo': 'bar',
    #     },
    #     'require_debug_true': {
    #         '()': 'django.utils.log.RequireDebugTrue',
    #     },
    # },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            # 'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        # 'file': {
        #     'level': 'DEBUG',
        #     'class': 'logging.FileHandler',
        #     'filename': 'mylog_test.log',
        #     'formatter': 'verbose'
        # },

        # 'mail_admins': {
        #     'level': 'ERROR',
        #     'class': 'django.utils.log.AdminEmailHandler',
        #     'filters': ['special']
        # }
    },
    'loggers': {
        # 'django': {
        #     'handlers': ['console'],  # console or file
        #     'propagate': True,
        #     'level': 'DEBUG',
        # },
        # 'django.request': {
        #     'handlers': ['console'],
        #     'level': 'DEBUG',
        #     'propagate': False,
        # },
        # For performance reasons, SQL logging is only enabled when settings.DEBUG is set to True
        # ref. https://docs.djangoproject.com/en/1.11/topics/logging/#django-db-backends
        'django.db.backends': {
            'handlers': ['console'],
            'propagate': False,
            'level': 'DEBUG',
        },

    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, "static"),
#     # another directory ...
# ]

if USE_S3:
    # aws settings
    AWS_ACCESS_KEY_ID = AWS_Profile['id']
    AWS_SECRET_ACCESS_KEY = AWS_Profile['key']
    AWS_STORAGE_BUCKET_NAME = AWS_Profile['AWS_STORAGE_BUCKET_NAME']
    AWS_DEFAULT_ACL = 'public-read'
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
    # s3 static settings
    AWS_LOCATION = 'static'
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'
    # STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    STATICFILES_STORAGE = 'django_shop_tutorial.storage_backends.StaticStorage'
    PUBLIC_MEDIA_LOCATION = 'media'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{PUBLIC_MEDIA_LOCATION}/'
    # DEFAULT_FILE_STORAGE = 'django_shop_tutorial.storage_backends.PublicMediaStorage'
    DEFAULT_FILE_STORAGE = 'django_shop_tutorial.storage_backends.PrivateMediaStorage'
else:
    # STATIC_URL = '/staticfiles/'
    # STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, "static")
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

CART_SESSION_ID = 'cart'
# CORS_ALLOWED_ORIGINS
CSRF_TRUSTED_ORIGINS = ["https://1599-123-241-198-209.ngrok-free.app"]
# CSRF_TRUSTED_ORIGINS = ["*"]

